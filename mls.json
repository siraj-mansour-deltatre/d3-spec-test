{
  "openapi": "3.0.1",
  "info": {
    "title": "Forge Distribution API",
    "description": "Swagger endpoints documentation for distribution API",
    "version": "13.16.1"
  },
  "paths": {
    "/v2/content/{language}/albums/{slug}": {
      "get": {
        "tags": [
          "Albums"
        ],
        "summary": "Album detail",
        "description": "Returns an Album detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/album\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/documents/{slug}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Document detail",
        "description": "Returns a Document detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/document\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/photos/{slug}": {
      "get": {
        "tags": [
          "Photos"
        ],
        "summary": "Photo detail",
        "description": "Returns a Photo detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/photo\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/sel-{slug}": {
      "get": {
        "tags": [
          "Selections"
        ],
        "summary": "Get Selection By Slug",
        "description": "Retrieves the list of entities of a published editorial selection for a specific culture, given its slug.<h3><a name='selection-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='sorting'>Sorting</a></h3><p>The <b>only</b> supported sorting is the <b>default</b> one (<i>featured:descending and contentDate:descending</i>). Specifying any other sorting condition will result in 400 (Bad Request) response</p>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#selection-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#selection-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema.\nItems array could contain the following entities:\n\n<b>story</b> - see <a href=\"/v2/schema/story\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>photo</b> - see <a href=\"/v2/schema/photo\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>album</b> - see <a href=\"/v2/schema/album\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>document</b> - see <a href=\"/v2/schema/document\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>brightcovevideo</b> - see <a href=\"/v2/schema/custom/brightcovevideo\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>promo</b> - see <a href=\"/v2/schema/custom/promo\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>alert</b> - see <a href=\"/v2/schema/custom/alert\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>quicklink</b> - see <a href=\"/v2/schema/custom/quicklink\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>topic</b> - see <a href=\"/v2/schema/custom/topic\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>author</b> - see <a href=\"/v2/schema/custom/author\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>club</b> - see <a href=\"/v2/schema/custom/club\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>player</b> - see <a href=\"/v2/schema/custom/player\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>match</b> - see <a href=\"/v2/schema/custom/match\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>competition</b> - see <a href=\"/v2/schema/custom/competition\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>season</b> - see <a href=\"/v2/schema/custom/season\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>venue</b> - see <a href=\"/v2/schema/custom/venue\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>visualcard</b> - see <a href=\"/v2/schema/custom/visualcard\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>visualstory</b> - see <a href=\"/v2/schema/custom/visualstory\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>broadcaster</b> - see <a href=\"/v2/schema/custom/broadcaster\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>syndication</b> - see <a href=\"/v2/schema/custom/syndication\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>brackets</b> - see <a href=\"/v2/schema/custom/brackets\" target=\"_blank\">here<a> to have a complete json schema.\n\n<b>matchesbrackets</b> - see <a href=\"/v2/schema/custom/matchesbrackets\" target=\"_blank\">here<a> to have a complete json schema.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          },
                          "featured": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/stories/{slug}": {
      "get": {
        "tags": [
          "Stories"
        ],
        "summary": "Story detail",
        "description": "Returns a Story detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/story\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/tags/{slug}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Tag detail",
        "description": "Returns a Tag detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/tag\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "selfUrl": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "featured": {
                      "type": "integer"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "externalSourceName": {
                      "type": "string"
                    },
                    "externalSourceReference": {
                      "type": "object"
                    },
                    "extraData": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/alerts/{slug}": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Alert detail",
        "description": "Returns a Alert detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/alert\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/authors/{slug}": {
      "get": {
        "tags": [
          "Authors"
        ],
        "summary": "Author detail",
        "description": "Returns a Author detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/author\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/brackets/{slug}": {
      "get": {
        "tags": [
          "Brackets"
        ],
        "summary": "Brackets detail",
        "description": "Returns a Brackets detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/brackets\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/brightcovevideos/{slug}": {
      "get": {
        "tags": [
          "Brightcove Videos"
        ],
        "summary": "Brightcovevideo detail",
        "description": "Returns a Brightcovevideo detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/brightcovevideo\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/broadcasters/{slug}": {
      "get": {
        "tags": [
          "Broadcasters"
        ],
        "summary": "Broadcaster detail",
        "description": "Returns a Broadcaster detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/broadcaster\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/clubs/{slug}": {
      "get": {
        "tags": [
          "Clubs"
        ],
        "summary": "Club detail",
        "description": "Returns a Club detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/club\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/competitions/{slug}": {
      "get": {
        "tags": [
          "Competitions"
        ],
        "summary": "Competition detail",
        "description": "Returns a Competition detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/competition\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/matches/{slug}": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Match detail",
        "description": "Returns a Match detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/match\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/matchesbrackets/{slug}": {
      "get": {
        "tags": [
          "Matches for Brackets"
        ],
        "summary": "Matchesbrackets detail",
        "description": "Returns a Matchesbrackets detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/matchesbrackets\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/players/{slug}": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Player detail",
        "description": "Returns a Player detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/player\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/promos/{slug}": {
      "get": {
        "tags": [
          "Promo"
        ],
        "summary": "Promo detail",
        "description": "Returns a Promo detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/promo\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/quicklinks/{slug}": {
      "get": {
        "tags": [
          "Quicklinks List"
        ],
        "summary": "Quicklink detail",
        "description": "Returns a Quicklink detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/quicklink\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/seasons/{slug}": {
      "get": {
        "tags": [
          "Seasons"
        ],
        "summary": "Season detail",
        "description": "Returns a Season detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/season\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/syndications/{slug}": {
      "get": {
        "tags": [
          "Syndication Partners"
        ],
        "summary": "Syndication detail",
        "description": "Returns a Syndication detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/syndication\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/topics/{slug}": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "Topic detail",
        "description": "Returns a Topic detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/topic\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/venues/{slug}": {
      "get": {
        "tags": [
          "Venues"
        ],
        "summary": "Venue detail",
        "description": "Returns a Venue detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/venue\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/visualcards/{slug}": {
      "get": {
        "tags": [
          "Visual Card"
        ],
        "summary": "Visualcard detail",
        "description": "Returns a Visualcard detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/visualcard\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/visualstories/{slug}": {
      "get": {
        "tags": [
          "Visual Story"
        ],
        "summary": "Visualstory detail",
        "description": "Returns a Visualstory detail",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The Slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/visualstory\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "selfUrl": {
                      "type": "string"
                    },
                    "_translationId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "_entityId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "fields": {
                      "type": "object"
                    },
                    "type": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "neutralSlug": {
                            "type": "string"
                          },
                          "externalSourceName": {
                            "type": "string"
                          },
                          "externalSourceReference": {
                            "type": "object"
                          },
                          "extraData": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "contentDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "lastUpdatedBy": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    },
                    "relations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "references": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "featured": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/albums": {
      "get": {
        "tags": [
          "Albums"
        ],
        "summary": "List of Albums",
        "description": "Returns a list of Albums<h3><a name='albums-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='albums-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='albums-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#albums-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#albums-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#albums-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#albums-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#albums-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#albums-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#albums-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#albums-filtering'>filtering options</a> and <a href='#albums-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#albums-filtering'>filtering options</a> and <a href='#albums-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/album/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/documents": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "List of Documents",
        "description": "Returns a list of Documents<h3><a name='documents-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='documents-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='documents-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#documents-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#documents-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#documents-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#documents-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#documents-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#documents-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#documents-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#documents-filtering'>filtering options</a> and <a href='#documents-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#documents-filtering'>filtering options</a> and <a href='#documents-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/document/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/photos": {
      "get": {
        "tags": [
          "Photos"
        ],
        "summary": "List of Photos",
        "description": "Returns a list of Photos<h3><a name='photos-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='photos-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='photos-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#photos-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#photos-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#photos-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#photos-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#photos-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#photos-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#photos-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#photos-filtering'>filtering options</a> and <a href='#photos-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#photos-filtering'>filtering options</a> and <a href='#photos-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/photo/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/stories": {
      "get": {
        "tags": [
          "Stories"
        ],
        "summary": "List of Stories",
        "description": "Returns a list of Stories<h3><a name='stories-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='stories-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='stories-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#stories-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#stories-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#stories-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#stories-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#stories-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#stories-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#stories-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#stories-filtering'>filtering options</a> and <a href='#stories-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#stories-filtering'>filtering options</a> and <a href='#stories-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/story/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List of Tags",
        "description": "Returns a list of Tags.<h3><a name='tags-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field.<p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?_id=<b>!</b>yourid</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='tags-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#tags-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object we want to <a href='#tags-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "title:asc",
                "title:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#tags-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#tags-filtering'>filtering options</a> and <a href='#tags-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Indexed fieldIndexed field (String). See <a href='#tags-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/tag/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "selfUrl": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "featured": {
                            "type": "integer"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/alerts": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "List of Alerts",
        "description": "Returns a list of Alerts<h3><a name='alerts-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='alerts-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='alerts-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#alerts-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#alerts-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#alerts-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#alerts-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#alerts-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#alerts-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#alerts-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#alerts-filtering'>filtering options</a> and <a href='#alerts-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#alerts-filtering'>filtering options</a> and <a href='#alerts-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/alert/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/authors": {
      "get": {
        "tags": [
          "Authors"
        ],
        "summary": "List of Authors",
        "description": "Returns a list of Authors<h3><a name='authors-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='authors-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='authors-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#authors-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#authors-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#authors-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#authors-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#authors-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#authors-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#authors-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#authors-filtering'>filtering options</a> and <a href='#authors-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#authors-filtering'>filtering options</a> and <a href='#authors-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/author/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/brackets": {
      "get": {
        "tags": [
          "Brackets"
        ],
        "summary": "List of Brackets",
        "description": "Returns a list of Brackets<h3><a name='brackets-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='brackets-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='brackets-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#brackets-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#brackets-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#brackets-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#brackets-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#brackets-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#brackets-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#brackets-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#brackets-filtering'>filtering options</a> and <a href='#brackets-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#brackets-filtering'>filtering options</a> and <a href='#brackets-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/brackets/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/brightcovevideos": {
      "get": {
        "tags": [
          "Brightcove Videos"
        ],
        "summary": "List of Brightcovevideos",
        "description": "Returns a list of Brightcovevideos<h3><a name='brightcovevideos-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='brightcovevideos-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='brightcovevideos-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#brightcovevideos-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#brightcovevideos-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#brightcovevideos-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#brightcovevideos-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#brightcovevideos-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#brightcovevideos-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#brightcovevideos-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#brightcovevideos-filtering'>filtering options</a> and <a href='#brightcovevideos-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.brightcoveId",
            "in": "query",
            "description": "Indexed fieldIndexed field (String). See <a href='#brightcovevideos-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.optaEventId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#brightcovevideos-filtering'>filtering options</a> and <a href='#brightcovevideos-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.optaMatchId",
            "in": "query",
            "description": "Indexed fieldIndexed field (String). See <a href='#brightcovevideos-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#brightcovevideos-filtering'>filtering options</a> and <a href='#brightcovevideos-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/brightcovevideo/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/broadcasters": {
      "get": {
        "tags": [
          "Broadcasters"
        ],
        "summary": "List of Broadcasters",
        "description": "Returns a list of Broadcasters<h3><a name='broadcasters-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='broadcasters-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='broadcasters-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#broadcasters-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#broadcasters-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#broadcasters-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#broadcasters-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#broadcasters-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#broadcasters-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#broadcasters-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#broadcasters-filtering'>filtering options</a> and <a href='#broadcasters-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#broadcasters-filtering'>filtering options</a> and <a href='#broadcasters-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/broadcaster/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/clubs": {
      "get": {
        "tags": [
          "Clubs"
        ],
        "summary": "List of Clubs",
        "description": "Returns a list of Clubs<h3><a name='clubs-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='clubs-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='clubs-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#clubs-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#clubs-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#clubs-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#clubs-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#clubs-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#clubs-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#clubs-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#clubs-filtering'>filtering options</a> and <a href='#clubs-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.abbreviation",
            "in": "query",
            "description": "Indexed fieldIndexed field (String). See <a href='#clubs-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.inMLSCompetition",
            "in": "query",
            "description": "Indexed fieldIndexed field (Boolean). See <a href='#clubs-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.isActiveClub",
            "in": "query",
            "description": "Indexed fieldIndexed field (Boolean). See <a href='#clubs-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.mgmClubId",
            "in": "query",
            "description": "Indexed fieldIndexed field (String). See <a href='#clubs-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.optaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#clubs-filtering'>filtering options</a> and <a href='#clubs-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#clubs-filtering'>filtering options</a> and <a href='#clubs-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/club/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/competitions": {
      "get": {
        "tags": [
          "Competitions"
        ],
        "summary": "List of Competitions",
        "description": "Returns a list of Competitions<h3><a name='competitions-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='competitions-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='competitions-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#competitions-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#competitions-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#competitions-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#competitions-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#competitions-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#competitions-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#competitions-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#competitions-filtering'>filtering options</a> and <a href='#competitions-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.mlsPhaseType",
            "in": "query",
            "description": "Indexed fieldIndexed field (String). See <a href='#competitions-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.optaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#competitions-filtering'>filtering options</a> and <a href='#competitions-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#competitions-filtering'>filtering options</a> and <a href='#competitions-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/competition/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/matches": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "List of Matches",
        "description": "Returns a list of Matches<h3><a name='matches-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='matches-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='matches-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#matches-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#matches-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#matches-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#matches-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#matches-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#matches-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#matches-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#matches-filtering'>filtering options</a> and <a href='#matches-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.awayClubOptaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#matches-filtering'>filtering options</a> and <a href='#matches-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.competitionOptaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#matches-filtering'>filtering options</a> and <a href='#matches-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.homeClubOptaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#matches-filtering'>filtering options</a> and <a href='#matches-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.matchDateTime",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#matches-filtering'>filtering options</a> and <a href='#matches-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.matchType",
            "in": "query",
            "description": "Indexed fieldIndexed field (String). See <a href='#matches-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.mgmId",
            "in": "query",
            "description": "Indexed fieldIndexed field (String). See <a href='#matches-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.optaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#matches-filtering'>filtering options</a> and <a href='#matches-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.seasonOptaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#matches-filtering'>filtering options</a> and <a href='#matches-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.venueOptaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#matches-filtering'>filtering options</a> and <a href='#matches-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#matches-filtering'>filtering options</a> and <a href='#matches-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/match/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/matchesbrackets": {
      "get": {
        "tags": [
          "Matches for Brackets"
        ],
        "summary": "List of Matchesbrackets",
        "description": "Returns a list of Matchesbrackets<h3><a name='matchesbrackets-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='matchesbrackets-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='matchesbrackets-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#matchesbrackets-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#matchesbrackets-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#matchesbrackets-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#matchesbrackets-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#matchesbrackets-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#matchesbrackets-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#matchesbrackets-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#matchesbrackets-filtering'>filtering options</a> and <a href='#matchesbrackets-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#matchesbrackets-filtering'>filtering options</a> and <a href='#matchesbrackets-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/matchesbrackets/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/players": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "List of Players",
        "description": "Returns a list of Players<h3><a name='players-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='players-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='players-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#players-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#players-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#players-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#players-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#players-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#players-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#players-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#players-filtering'>filtering options</a> and <a href='#players-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.clubOptaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#players-filtering'>filtering options</a> and <a href='#players-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.isActiveMLSPlayer",
            "in": "query",
            "description": "Indexed fieldIndexed field (Boolean). See <a href='#players-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.optaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#players-filtering'>filtering options</a> and <a href='#players-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#players-filtering'>filtering options</a> and <a href='#players-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/player/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/promos": {
      "get": {
        "tags": [
          "Promo"
        ],
        "summary": "List of Promos",
        "description": "Returns a list of Promos<h3><a name='promos-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='promos-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='promos-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#promos-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#promos-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#promos-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#promos-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#promos-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#promos-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#promos-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#promos-filtering'>filtering options</a> and <a href='#promos-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#promos-filtering'>filtering options</a> and <a href='#promos-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/promo/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/quicklinks": {
      "get": {
        "tags": [
          "Quicklinks List"
        ],
        "summary": "List of Quicklinks",
        "description": "Returns a list of Quicklinks<h3><a name='quicklinks-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='quicklinks-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='quicklinks-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#quicklinks-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#quicklinks-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#quicklinks-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#quicklinks-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#quicklinks-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#quicklinks-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#quicklinks-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#quicklinks-filtering'>filtering options</a> and <a href='#quicklinks-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#quicklinks-filtering'>filtering options</a> and <a href='#quicklinks-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/quicklink/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/seasons": {
      "get": {
        "tags": [
          "Seasons"
        ],
        "summary": "List of Seasons",
        "description": "Returns a list of Seasons<h3><a name='seasons-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='seasons-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='seasons-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#seasons-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#seasons-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#seasons-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#seasons-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#seasons-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#seasons-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#seasons-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#seasons-filtering'>filtering options</a> and <a href='#seasons-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.competitionOptaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#seasons-filtering'>filtering options</a> and <a href='#seasons-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.optaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#seasons-filtering'>filtering options</a> and <a href='#seasons-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#seasons-filtering'>filtering options</a> and <a href='#seasons-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/season/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/syndications": {
      "get": {
        "tags": [
          "Syndication Partners"
        ],
        "summary": "List of Syndications",
        "description": "Returns a list of Syndications<h3><a name='syndications-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='syndications-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='syndications-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#syndications-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#syndications-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#syndications-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#syndications-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#syndications-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#syndications-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#syndications-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#syndications-filtering'>filtering options</a> and <a href='#syndications-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#syndications-filtering'>filtering options</a> and <a href='#syndications-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/syndication/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/topics": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "List of Topics",
        "description": "Returns a list of Topics<h3><a name='topics-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='topics-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='topics-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#topics-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#topics-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#topics-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#topics-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#topics-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#topics-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#topics-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#topics-filtering'>filtering options</a> and <a href='#topics-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#topics-filtering'>filtering options</a> and <a href='#topics-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/topic/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/venues": {
      "get": {
        "tags": [
          "Venues"
        ],
        "summary": "List of Venues",
        "description": "Returns a list of Venues<h3><a name='venues-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='venues-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='venues-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#venues-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#venues-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#venues-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#venues-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#venues-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#venues-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "_translationId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Guid). See <a href='#venues-filtering'>filtering options</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#venues-filtering'>filtering options</a> and <a href='#venues-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields.optaId",
            "in": "query",
            "description": "Indexed fieldIndexed field (Int32). See <a href='#venues-filtering'>filtering options</a> and <a href='#venues-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastUpdatedDate",
            "in": "query",
            "description": "Indexed fieldIndexed field (DateTime). See <a href='#venues-filtering'>filtering options</a> and <a href='#venues-range-operator'>range operator</a> for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/venue/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/visualcards": {
      "get": {
        "tags": [
          "Visual Card"
        ],
        "summary": "List of Visualcards",
        "description": "Returns a list of Visualcards<h3><a name='visualcards-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='visualcards-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='visualcards-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#visualcards-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#visualcards-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#visualcards-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#visualcards-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#visualcards-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#visualcards-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/visualcard/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/content/{language}/visualstories": {
      "get": {
        "tags": [
          "Visual Story"
        ],
        "summary": "List of Visualstories",
        "description": "Returns a list of Visualstories<h3><a name='visualstories-filtering'>Filtering (equal, not equal)</a></h3><p>Any query string parameter will be used as a filter but only if an index has been defined on the same field. For example to filter for a specific tag you can use <i>...?tags.slug=yourtag</i></p><p>Also custom defined and system fields on entity can be indexed and are available for filtering purpose.</p><p>If you need to perform a not equal operation you can prefix the value with <b>!</b> to the value, for example <i>...?tags.slug=<b>!</b>yourtag</i>.<p>If more than one filter is specified, all of them are combined with <b>AND</b> operator.<p>\n<h3><a name='visualstories-geolocation'>Geo location filtering ($near)</a></h3><p>You can also filter by proximity on a given geolocation (geographic location).</p><p>For example using images metadata and given that the geoLocation field is configured as a 2dsphere indexed field, you can filter by it simply adding to the query string the following text:<br/><i>...?fields.geoLocation=$near(7.6830323, 45.0710448, 1000)</i>, where:<ul><li>$near is the keyword to mark the geolocation search</li><li>(7.6830323, 45.0710448, 1000) are the three mandatory parameters to do the search: longitude, latitude and distance expressed in meters, <b>in this order</b></li></ul></p>\n<h3><a name='visualstories-range-operator'>Range operator ($range)</a></h3><p>You can also perform a '<i>range search</i>' grater or equal than value and/or lesser or equal than value (obviously <b>only if</b> you have defined an index for the field).</p><p>The syntax to perform a range filtering is fieldName=$range(value1,value2) where:<p><ul><li>value1 is the value you want to apply the greater than or equal operator</li><li>value2 is the value you want to apply the lesser than or equal operator</li></ul>\n",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "The language code",
            "required": true,
            "schema": {
              "enum": [
                "en-us",
                "es-es",
                "nd-nd"
              ],
              "type": "string"
            }
          },
          {
            "name": "tags.slug",
            "in": "query",
            "description": "The language-specific slug of the tag we want to use as a <a href='#visualstories-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag we want to use as a <a href='#visualstories-filtering'>filter</a>. This parameter can be specified more than once.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags.externalSourceReference",
            "in": "query",
            "description": "The <i>externalSourceReference</i> object of the tag we want to <a href='#visualstories-filtering'>filter for</a>, defined as <i>sourceName:sourceId</i>. This filter can be specified more than once. (example: if sourceName is 'players' and sourceId is '123456', the value should be 'players:123456')",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "context.slug",
            "in": "query",
            "description": "The language-specific slug of the tag assigned as the context we want to use as a <a href='#visualstories-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context.neutralSlug",
            "in": "query",
            "description": "The language-independent slug of the tag assigned as the context we want to use as a <a href='#visualstories-filtering'>filter</a>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Specify the value 1 to get only promoted (featured) content; 0 to get only NOT promoted items.",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "The language-specific identifier (slug) of the content we want to search for. See <a href='#visualstories-filtering'>filtering options</a> for more details.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_listAvailability",
            "in": "query",
            "description": "Get content with the specified availability option. <b>Possible values</b>: 0 (Public) or 1 (Unlisted). <b>Default</b>: when <b>NOT</b> specified, only <b>Public</b> content (0) will be returned",
            "schema": {
              "enum": [
                0,
                1
              ],
              "type": "integer"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of entities to be skipped. <b>Default</b>: 0",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "The maximum number of entities to be returned (up to 100). <b>Default</b>: 25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$sort",
            "in": "query",
            "description": "The field to be used as the sort condition with the desired direction. Only one field can be specified per request. <b>Default</b>: when <b>NOT</b> specified content will be ordered by <i>featured</i> and <i>contentDate</i> descending",
            "schema": {
              "enum": [
                "contentDate:asc",
                "contentDate:desc",
                "featured:asc",
                "featured:desc",
                "lastUpdatedDate:asc",
                "lastUpdatedDate:desc",
                "context.slug:asc",
                "context.slug:desc",
                "tags.slug:asc",
                "tags.slug:desc",
                "context.neutralSlug:asc",
                "context.neutralSlug:desc",
                "tags.neutralSlug:asc",
                "tags.neutralSlug:desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Below is described a basic json schema. Please, see <a href=\"/v2/schema/custom/visualstory/list\" target=\"_blank\">here<a> to have a complete json schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextUrl": {
                          "type": "string"
                        },
                        "previousUrl": {
                          "type": "string"
                        },
                        "maxItems": {
                          "type": "integer"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "selfUrl": {
                            "type": "string"
                          },
                          "_translationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "_entityId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "fields": {
                            "type": "object"
                          },
                          "type": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "selfUrl": {
                                  "type": "string"
                                },
                                "_translationId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "_entityId": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "fields": {
                                  "type": "object"
                                },
                                "neutralSlug": {
                                  "type": "string"
                                },
                                "externalSourceName": {
                                  "type": "string"
                                },
                                "externalSourceReference": {
                                  "type": "object"
                                },
                                "extraData": {
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "contentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "lastUpdatedDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "createdBy": {
                            "type": "string"
                          },
                          "lastUpdatedBy": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/photos/formats": {
      "get": {
        "tags": [
          "Photos"
        ],
        "summary": "Photo formats",
        "description": "Returns configured photo formats",
        "responses": {
          "200": {
            "description": "Call went well, requested photo formats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "meta": {
                      "type": "object",
                      "properties": {
                        "apiVersion": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "instructions": {
                            "type": "string"
                          },
                          "aspectRatio": {
                            "type": "string"
                          },
                          "extension": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/echo": {
      "get": {
        "tags": [
          "Echo"
        ],
        "summary": "Echo",
        "description": "Echo endpoint",
        "responses": {
          "200": {
            "description": "Below is described the json schema of the response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "MachineName": {
                      "type": "string"
                    },
                    "DateTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "AssemblyVersion": {
                      "type": "string"
                    },
                    "Version": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}